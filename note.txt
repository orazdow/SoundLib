template class types (so far):

Ctl: msg, id, childs*, run()
Sig: float input, float output, float out(), out(dbl step)  
Env public sig: uint on, float out, float out(uint trig), void reset()
Voice public sig : uint on, float out(dbl step, int trig), float out(int note, int trig)
polyvoice public Voice : env* envs, int voices
--------------------------
poly --> setEnvs(Env* envs), setEnvs(Voice* voices), setPVoice(polyvoice p) 
Sig->connect input (default 1), ctl connect shadows sig connect
--------------------------
msgRoute
msgGen
Crossfade
XyFade(a,b,c,d)
Sum
msgPrint
makeNote 
makeParam
key callback fn !
--------------------------
add:
-msg format field 
-bus
-sig_ctl
-onConnect() event in Ctl..
-make poly receive notes (now makenote is integrated)
-midi filter define
-cycle detection
-signal chain...
-input~, output~
-control params (in msg..)
-error handling on receive message side (wrong format)
-copy assignment operator
-option for seperate ctl, audio source callbacks
-portmidi wrapper
-glfw mode!
-----------
add:
filters
sinosc
fncgen
noise
samplehold
fmosc
delay
wavplayer
fft
comb
ctl seq
microtuning
note maps
-----------
-add init guard
-enum msg_fmt { u32, u32_f, note }
-params struct: {32 floats}
-signal chain... a_glob.call->:osc.connect(filt.connect(out));


